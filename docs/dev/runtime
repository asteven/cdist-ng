# @see http://en.wikipedia.org/wiki/Runtime_system

import os
import asyncio
import tempfile
import logging
logging.basicConfig(level=logging.ERROR, format='%(levelname)s: %(message)s')

log = logging.getLogger('cdist')
log.setLevel(logging.DEBUG)

from cdist import session
from cdist import runtime


#_session = session.Session(exec_path='/bin/echo')
_session = session.Session(exec_path='/home/sar/.virtualenvs/cdist-ng/bin/cdng')
_session.add_conf_dir(os.path.expanduser('~/vcs/cdist/cdist/conf'))
_session.add_conf_dir(os.path.expanduser('~/.cdist'))
_session.add_conf_dir(os.path.expanduser('~/vcs/cdist-ng/conf'))

#url = 'ssh+sudo+chroot://root@netboot-dev.ethz.ch/local/nfsroot/preos'
url = 'ssh://sar@localhost/tmp/foobar'
_session.add_target(url)
# override remote-cache-dir for testing
_remote_session_dir = tempfile.mkdtemp(prefix='cdist-remote-')
_session['remote-cache-dir'] = os.path.join(_remote_session_dir, _session['session-id'])

_session_dir = tempfile.mkdtemp(prefix='cdist-session-')
_session.to_dir(_session_dir)

_target = _session.targets[0]

_runtime = runtime.Runtime(_session, _target, _session_dir)

loop = asyncio.get_event_loop()

#loop.run_until_complete(_runtime.transfer_global_explorers())
#loop.run_until_complete(_runtime.run_global_explorer('disks'))
#loop.run_until_complete(_runtime.run_global_explorer('memory_size'))

def run():
    loop.run_until_complete(_runtime.run_global_explorers())
    loop.run_until_complete(_runtime.run_initial_manifest())

    # manually create a object to have something to work with
    _type = _runtime.get_type('__file')
    _object = _type('tmp/test', parameters={'state': 'present'})
    _object_dir = _runtime.get_object_path(_object, 'local')
    os.makedirs(_object_dir)
    _object.to_dir(_object_dir)

    loop.run_until_complete(_runtime.run_type_explorers(_object))
    loop.run_until_complete(_runtime.run_type_manifest(_object))
    _object['code-local'] = loop.run_until_complete(_runtime.run_gencode_local(_object))
    _object['code-remote'] = loop.run_until_complete(_runtime.run_gencode_remote(_object))
    _runtime.sync_object(_object)
    if _object['code-local']:
       loop.run_until_complete(_runtime.run_code_local(_object))
    if _object['code-remote']:
       loop.run_until_complete(_runtime.transfer_code_remote(_object))
       loop.run_until_complete(_runtime.run_code_remote(_object))

run()

--------------------------------------------------------------------------------
# object which has a manifest

loop.run_until_complete(_runtime.run_global_explorers())

# manually create a object to have something to work with
_type = _runtime.get_type('__timezone')
_object = _type('Europe/Zurich')
_object_dir = _runtime.get_object_path(_object, 'local')
os.makedirs(_object_dir)
_object.to_dir(_object_dir)

loop.run_until_complete(_runtime.run_type_manifest(_object))

--------------------------------------------------------------------------------


#loop.run_until_complete(_runtime.transfer_type_explorers(_type))
#loop.run_until_complete(_runtime.transfer_object_parameters(_object))

loop.run_until_complete(_runtime.run_type_explorers(_object))


--------------------------------------------------------------------------------

# test timeouts
loop.run_until_complete(_runtime.local.call(['sleep 3;', 'echo bla']))
loop.run_until_complete(_runtime.local.call(['sleep 3;', 'echo bla'], timeout=2))

loop.run_until_complete(_runtime.local.check_call(['sleep 3;', 'echo bla']))
loop.run_until_complete(_runtime.local.check_call(['sleep 3;', 'echo bla'], timeout=2))

loop.run_until_complete(_runtime.local.check_output(['sleep 3;', 'echo bla']))
loop.run_until_complete(_runtime.local.check_output(['sleep 3;', 'echo bla'], timeout=2))
